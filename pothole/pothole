import cv2
import numpy as np

def detect_potholes(frame):
    net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
    with open("coco.names", "r") as f:
        classes = f.read().strip().split("\n")

    height, width, _ = frame.shape
    net.setInput(cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False))
    outs = net.forward(net.getUnconnectedOutLayersNames())

    pothole_count = 0

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and classes[class_id] == "pothole":
                pothole_count += 1
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    return frame, pothole_count

if __name__ == "__main__":
    cap = cv2.VideoCapture(0)  # Use 0 for default camera or provide the video file path

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        result_frame, pothole_count = detect_potholes(frame)

        cv2.putText(result_frame, f"Pothole Count: {pothole_count}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        
        cv2.imshow("Pothole Detection", result_frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
